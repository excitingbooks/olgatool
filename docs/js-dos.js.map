{"version":3,"sources":["node_modules/browser-pack/_prelude.js","js-dos-ts/js-dos-build.ts","js-dos-ts/js-dos-ci.ts","js-dos-ts/js-dos-conf.ts","js-dos-ts/js-dos-fs.ts","js-dos-ts/js-dos-host.ts","js-dos-ts/js-dos-module.ts","js-dos-ts/js-dos-options.ts","js-dos-ts/js-dos-ui.ts","js-dos-ts/js-dos-xhr.ts","js-dos-ts/js-dos.ts"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","Build","version","wasmSize","jsSize","DosCommandInterface","dos","onready","_this","this","_classCallCheck","shellInputQueue","shellInputClients","em","api","ping","msg","_len","arguments","args","Array","_key","onping","canvas","width","height","_this2","_len2","cmd","_key2","Promise","resolve","reject","push","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","err","return","requestShellInput","_this3","send","data","error","sendKeyPress","buffer","maxLength","shift","cmdLength","lengthBytesUTF8","onerror","stringToUTF8","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","jsdosconf","js_dos_xhr_1","DosFS","url","type","Xhr","responseType","fail","progress","total","loaded","onprogress","success","bytes","Uint8Array","_malloc","HEAPU8","set","retcode","_extract_zip","_free","file","body","ArrayBuffer","parts","replace","RegExp","split","filename","trim","path","part","FS_createPath","FS_createDataFile","js_dos_build_1","DosHost","wasmSupported","global","window","wdosboxPromise","WebAssembly","_typeof","instantiate","compile","wmodule","Module","of","Instance","polyfill","Math","imul","b","al","bl","fround","x","clz32","trunc","ceil","floor","WDOSBOX","ondosbox","instantiateWasm","compileDosBox","then","instance","setTimeout","message","buildTotal","wasmUrl","status","response","promise","onreject","reason","catch","wasmModule","info","receiveInstance","eval","Host","js_dos_ci_1","js_dos_conf_1","js_dos_fs_1","js_dos_options_1","js_dos_ui_1","DosModule","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","isValid","ci","fs","ui","DosOptions","log","dosbox","wdosboxUrl","console","DosUi","stage","SDL","defaults","widht","copyOnLock","discardOnLock","opaqueFrontBuffer","main","detach","createFile","unshift","callMain","css","overlayHtml","document","getElementById","style","createElement","id","innerHTML","head","appendChild","parentElement","className","_container","replaceChild","overlay","container","childById","loaderMessage","hidden","show","onprogressFallback","round","hide","setAttribute","parent","childElementCount","child","children","options","resource","method","xhr","XMLHttpRequest","open","setRequestHeader","overrideMimeType","progressListner","addEventListener","evt","errorListener","onreadystatechange","onReadyStateChange","readyState","max","bufView","Uint16Array","result","maxCallSize","pow","String","fromCharCode","apply","subarray","js_dos_host_1","js_dos_module_1","Dos","dosReadyPromise","assign","resolveDosBox","ready","runtime"],"mappings":"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","file":"js-dos.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","// Autogenerated\n// -------------\n// gulpfile.js --> generateBuildInfo\n\nexport const Build = {\n    version: \"6.22.18 (7c3bac92b25189169b3468bfd12782519212d508)\",\n    wasmSize: 2167445,\n    jsSize:  503772,\n};\n","// # DosCommandInterface\n// Is abstraction that allows you to control runned instance of js-dos\nimport { Dos } from \"./js-dos\";\nimport { DosModule } from \"./js-dos-module\";\nimport { Xhr } from \"./js-dos-xhr\";\n\nexport class DosCommandInterface {\n    public dos: DosModule;\n    private em: typeof Module;\n    private api: LowLevelApi;\n    private onready: (ci: DosCommandInterface) => void;\n\n    private shellInputQueue: string[] = [];\n    private shellInputClients: Array<() => void> = [];\n\n    constructor(dos: DosModule, onready: (ci: DosCommandInterface) => void) {\n        this.dos = dos;\n        this.em = (dos as any);\n        this.api = (dos as any);\n        this.api.ping = (msg: string, ...args: any[]) => {\n            this.onping(msg, args);\n        };\n        this.onready = onready;\n    }\n\n    // * `width()` - return dosbox window width in pixels\n    public width() {\n        return this.dos.canvas.width;\n    }\n\n    // * `height()` - return dosbox window height in pixels\n    public height() {\n        return this.dos.canvas.height;\n    }\n\n    // * `shell([cmd1, cmd2, ...])` - executes passed commands\n    // in dosbox shell if it's runned, returns Promise that\n    // resolves when commands sequence is executed\n    public shell(...cmd: string[]) {\n        if (cmd.length === 0) {\n            return;\n        }\n\n        return new Promise((resolve, reject) => {\n            this.shellInputClients.push(resolve);\n            for (const next of cmd) {\n                this.shellInputQueue.push(next);\n            }\n            this.requestShellInput();\n        });\n    }\n\n    // * `screenshot()` - get screnshot of canvas as ImageData\n    public screenshot() {\n        return new Promise((resolve) => {\n            this.api.send(\"screenshot\", \"\", (data) => {\n                resolve(data);\n            });\n        });\n    }\n\n    // * `exit()` - immediately exit from runtime\n    public exit() {\n        try {\n            this.api.send(\"exit\");\n        } catch (e) {\n            return 0;\n        }\n\n        this.dos.error(\"Runtime is still alive!\");\n        return -1;\n    }\n\n    private sendKeyPress(code: number) {\n        this.api.send(\"sdl_key_event\", code + \"\");\n    }\n\n    private requestShellInput() {\n        this.sendKeyPress(13);\n    }\n\n    private onping(msg: string, args: any[]) {\n        switch (msg) {\n            case \"ready\":\n                this.onready(this);\n                break;\n            case \"shell_input\":\n                if (this.shellInputQueue.length === 0) {\n                    return;\n                }\n\n                const buffer: number = args[0];\n                const maxLength: number = args[1];\n\n                const cmd = this.shellInputQueue.shift();\n                const cmdLength = (this.em as any).lengthBytesUTF8(cmd) + 1;\n\n                if (cmdLength > maxLength) {\n                    this.dos.onerror(\"Can't execute cmd '\" + cmd +\n                        \"', because it's bigger then max cmd length \" + maxLength);\n                    return;\n                }\n\n                (this.em as any).stringToUTF8(cmd, buffer, cmdLength);\n\n                if (this.shellInputQueue.length === 0) {\n                    for (const resolve of this.shellInputClients) {\n                        resolve();\n                    }\n                    this.shellInputClients = [];\n                } else {\n                    this.requestShellInput();\n                }\n            default:\n            /* do nothing */\n        }\n    }\n}\n\ninterface LowLevelApi {\n    send: (event: string, msg?: any, callback?: (msg: string) => void) => void;\n    ping: (msg: string) => void;\n}\n","// # js-dos default config\n// This is default config for dosbox.\n\n/* tslint:disable:max-line-length */\nexport const jsdosconf = `\n# This is the configurationfile for DOSBox 0.74. (Please use the latest version of DOSBox)\n# Lines starting with a # are commentlines and are ignored by DOSBox.\n# They are used to (briefly) document the effect of each option.\n\n[sdl]\n#       fullscreen: Start dosbox directly in fullscreen. (Press ALT-Enter to go back)\n#       fulldouble: Use double buffering in fullscreen. It can reduce screen flickering, but it can also result in a slow DOSBox.\n#   fullresolution: What resolution to use for fullscreen: original or fixed size (e.g. 1024x768).\n#                     Using your monitor's native resolution with aspect=true might give the best results.\n#                     If you end up with small window on a large screen, try an output different from surface.\n# windowresolution: Scale the window to this size IF the output device supports hardware scaling.\n#                     (output=surface does not!)\n#           output: What video system to use for output.\n#                   Possible values: surface, overlay, opengl, openglnb.\n#         autolock: Mouse will automatically lock, if you click on the screen. (Press CTRL-F10 to unlock)\n#      sensitivity: Mouse sensitivity.\n#      waitonerror: Wait before closing the console if dosbox has an error.\n#         priority: Priority levels for dosbox. Second entry behind the comma is for when dosbox is not focused/minimized.\n#                     pause is only valid for the second entry.\n#                   Possible values: lowest, lower, normal, higher, highest, pause.\n#       mapperfile: File used to load/save the key/event mappings from. Resetmapper only works with the defaul value.\n#     usescancodes: Avoid usage of symkeys, might not work on all operating systems.\n\nfullscreen=false\nfulldouble=false\nfullresolution=original\nwindowresolution=original\noutput=surface\nautolock=false\nsensitivity=100\nwaitonerror=true\npriority=higher,normal\nmapperfile=mapper-jsdos.map\nusescancodes=true\nvsync=false\n\n[dosbox]\n# language: Select another language file.\n#  machine: The type of machine tries to emulate.\n#           Possible values: hercules, cga, tandy, pcjr, ega, vgaonly, svga_s3, svga_et3000, svga_et4000, svga_paradise, vesa_nolfb, vesa_oldvbe.\n# captures: Directory where things like wave, midi, screenshot get captured.\n#  memsize: Amount of memory DOSBox has in megabytes.\n#             This value is best left at its default to avoid problems with some games,\n#             though few games might require a higher value.\n#             There is generally no speed advantage when raising this value.\n\nlanguage=\nmachine=svga_s3\ncaptures=capture\nmemsize=16\n\n[render]\n# frameskip: How many frames DOSBox skips before drawing one.\n#    aspect: Do aspect correction, if your output method doesn't support scaling this can slow things down!.\n#    scaler: Scaler used to enlarge/enhance low resolution modes.\n#              If 'forced' is appended, then the scaler will be used even if the result might not be desired.\n#            Possible values: none, normal2x, normal3x, advmame2x, advmame3x, advinterp2x, advinterp3x, hq2x, hq3x, 2xsai, super2xsai, supereagle, tv2x, tv3x, rgb2x, rgb3x, scan2x, scan3x.\n\nframeskip=0\naspect=false\nscaler=normal2x\n\n[cpu]\n#      core: CPU Core used in emulation. auto will switch to dynamic if available and appropriate.\n#            Possible values: auto, dynamic, normal, simple.\n#   cputype: CPU Type used in emulation. auto is the fastest choice.\n#            Possible values: auto, 386, 386_slow, 486_slow, pentium_slow, 386_prefetch.\n#    cycles: Amount of instructions DOSBox tries to emulate each millisecond.\n#            Setting this value too high results in sound dropouts and lags.\n#            Cycles can be set in 3 ways:\n#              'auto'          tries to guess what a game needs.\n#                              It usually works, but can fail for certain games.\n#              'fixed #number' will set a fixed amount of cycles. This is what you usually need if 'auto' fails.\n#                              (Example: fixed 4000).\n#              'max'           will allocate as much cycles as your computer is able to handle.\n#\n#            Possible values: auto, fixed, max.\n#   cycleup: Amount of cycles to decrease/increase with keycombo.(CTRL-F11/CTRL-F12)\n# cycledown: Setting it lower than 100 will be a percentage.\n\ncore=auto\ncputype=auto\ncycles=auto\ncycleup=10\ncycledown=20\n\n[mixer]\n#   nosound: Enable silent mode, sound is still emulated though.\n#      rate: Mixer sample rate, setting any device's rate higher than this will probably lower their sound quality.\n#            Possible values: 44100, 48000, 32000, 22050, 16000, 11025, 8000, 49716.\n# blocksize: Mixer block size, larger blocks might help sound stuttering but sound will also be more lagged.\n#            Possible values: 1024, 2048, 4096, 8192, 512, 256.\n# prebuffer: How many milliseconds of data to keep on top of the blocksize.\n\nnosound=false\nrate=44100\nblocksize=1024\nprebuffer=20\n\n[midi]\n#     mpu401: Type of MPU-401 to emulate.\n#             Possible values: intelligent, uart, none.\n# mididevice: Device that will receive the MIDI data from MPU-401.\n#             Possible values: default, win32, alsa, oss, coreaudio, coremidi, none.\n# midiconfig: Special configuration options for the device driver. This is usually the id of the device you want to use.\n#               See the README/Manual for more details.\n\nmpu401=intelligent\nmididevice=default\nmidiconfig=\n\n[sblaster]\n#  sbtype: Type of Soundblaster to emulate. gb is Gameblaster.\n#          Possible values: sb1, sb2, sbpro1, sbpro2, sb16, gb, none.\n#  sbbase: The IO address of the soundblaster.\n#          Possible values: 220, 240, 260, 280, 2a0, 2c0, 2e0, 300.\n#     irq: The IRQ number of the soundblaster.\n#          Possible values: 7, 5, 3, 9, 10, 11, 12.\n#     dma: The DMA number of the soundblaster.\n#          Possible values: 1, 5, 0, 3, 6, 7.\n#    hdma: The High DMA number of the soundblaster.\n#          Possible values: 1, 5, 0, 3, 6, 7.\n# sbmixer: Allow the soundblaster mixer to modify the DOSBox mixer.\n# oplmode: Type of OPL emulation. On 'auto' the mode is determined by sblaster type. All OPL modes are Adlib-compatible, except for 'cms'.\n#          Possible values: auto, cms, opl2, dualopl2, opl3, none.\n#  oplemu: Provider for the OPL emulation. compat might provide better quality (see oplrate as well).\n#          Possible values: default, compat, fast.\n# oplrate: Sample rate of OPL music emulation. Use 49716 for highest quality (set the mixer rate accordingly).\n#          Possible values: 44100, 49716, 48000, 32000, 22050, 16000, 11025, 8000.\n\nsbtype=sb16\nsbbase=220\nirq=7\ndma=1\nhdma=5\nsbmixer=true\noplmode=auto\noplemu=default\noplrate=44100\n\n[gus]\n#      gus: Enable the Gravis Ultrasound emulation.\n#  gusrate: Sample rate of Ultrasound emulation.\n#           Possible values: 44100, 48000, 32000, 22050, 16000, 11025, 8000, 49716.\n#  gusbase: The IO base address of the Gravis Ultrasound.\n#           Possible values: 240, 220, 260, 280, 2a0, 2c0, 2e0, 300.\n#   gusirq: The IRQ number of the Gravis Ultrasound.\n#           Possible values: 5, 3, 7, 9, 10, 11, 12.\n#   gusdma: The DMA channel of the Gravis Ultrasound.\n#           Possible values: 3, 0, 1, 5, 6, 7.\n# ultradir: Path to Ultrasound directory. In this directory\n#           there should be a MIDI directory that contains\n#           the patch files for GUS playback. Patch sets used\n#           with Timidity should work fine.\n\ngus=false\ngusrate=44100\ngusbase=240\ngusirq=5\ngusdma=3\nultradir=C:\\ULTRASND\n\n[speaker]\n# pcspeaker: Enable PC-Speaker emulation.\n#    pcrate: Sample rate of the PC-Speaker sound generation.\n#            Possible values: 44100, 48000, 32000, 22050, 16000, 11025, 8000, 49716.\n#     tandy: Enable Tandy Sound System emulation. For 'auto', emulation is present only if machine is set to 'tandy'.\n#            Possible values: auto, on, off.\n# tandyrate: Sample rate of the Tandy 3-Voice generation.\n#            Possible values: 44100, 48000, 32000, 22050, 16000, 11025, 8000, 49716.\n#    disney: Enable Disney Sound Source emulation. (Covox Voice Master and Speech Thing compatible).\n\npcspeaker=true\npcrate=44100\ntandy=auto\ntandyrate=44100\ndisney=true\n\n[joystick]\n# joysticktype: Type of joystick to emulate: auto (default), none,\n#               2axis (supports two joysticks),\n#               4axis (supports one joystick, first joystick used),\n#               4axis_2 (supports one joystick, second joystick used),\n#               fcs (Thrustmaster), ch (CH Flightstick).\n#               none disables joystick emulation.\n#               auto chooses emulation depending on real joystick(s).\n#               (Remember to reset dosbox's mapperfile if you saved it earlier)\n#               Possible values: auto, 2axis, 4axis, 4axis_2, fcs, ch, none.\n#        timed: enable timed intervals for axis. Experiment with this option, if your joystick drifts (away).\n#     autofire: continuously fires as long as you keep the button pressed.\n#       swap34: swap the 3rd and the 4th axis. can be useful for certain joysticks.\n#   buttonwrap: enable button wrapping at the number of emulated buttons.\n\njoysticktype=auto\ntimed=true\nautofire=false\nswap34=false\nbuttonwrap=false\n\n[serial]\n# serial1: set type of device connected to com port.\n#          Can be disabled, dummy, modem, nullmodem, directserial.\n#          Additional parameters must be in the same line in the form of\n#          parameter:value. Parameter for all types is irq (optional).\n#          for directserial: realport (required), rxdelay (optional).\n#                           (realport:COM1 realport:ttyS0).\n#          for modem: listenport (optional).\n#          for nullmodem: server, rxdelay, txdelay, telnet, usedtr,\n#                         transparent, port, inhsocket (all optional).\n#          Example: serial1=modem listenport:5000\n#          Possible values: dummy, disabled, modem, nullmodem, directserial.\n# serial2: see serial1\n#          Possible values: dummy, disabled, modem, nullmodem, directserial.\n# serial3: see serial1\n#          Possible values: dummy, disabled, modem, nullmodem, directserial.\n# serial4: see serial1\n#          Possible values: dummy, disabled, modem, nullmodem, directserial.\n\nserial1=dummy\nserial2=dummy\nserial3=disabled\nserial4=disabled\n\n[dos]\n#            xms: Enable XMS support.\n#            ems: Enable EMS support.\n#            umb: Enable UMB support.\n# keyboardlayout: Language code of the keyboard layout (or none).\n\nxms=true\nems=true\numb=true\nkeyboardlayout=auto\n\n[ipx]\n# ipx: Enable ipx over UDP/IP emulation.\n\nipx=false\n\n[autoexec]\n# Lines in this section will be run at startup.\n# You can put your MOUNT lines here.\n\n# https://js-dos.com\n# █▀▀▀▀▀█ █  ▄▄▄▀▀█ █▀▀▀▀▀█\n# █ ███ █ ██▄ █ ▀ ▄ █ ███ █\n# █ ▀▀▀ █ ▄██ ▀ ▀▀█ █ ▀▀▀ █\n# ▀▀▀▀▀▀▀ ▀ █▄▀▄▀ █ ▀▀▀▀▀▀▀\n# █▀▄▄█▀▀▄▄ ▀ ▀█▄▄▄▄ ▀▄█▀█▀\n# █▀ ▀ ▀▀▄ █▀ ▄ ▄▀▀▀▄ █▀█▄\n# ▄ ▄▄ █▀▀▄ ▄▀▄▀▀█  ▀▀▄▀▀█▀\n#   ▄▀▀█▀▀ █▀█▀█▀▀▄ ▀██▀█▄\n# ▀▀▀ ▀ ▀ █▄█ ▀█▄▄█▀▀▀█▀▀\n# █▀▀▀▀▀█ ▄▄▄ ▄ ▄ █ ▀ █▄▄▄▄\n# █ ███ █ ▀█▀▀▄▀▀▄████▀▀█▄█\n# █ ▀▀▀ █ ▄▀▀█▀█▀▄ ▀▀▄▄█▄█ \n# ▀▀▀▀▀▀▀ ▀   ▀▀ ▀  ▀   ▀▀▀\n`;\n","// # DosFS\n// API for working with file system of dosbox\n\nimport { DosModule } from \"./js-dos-module\";\nimport { Xhr } from \"./js-dos-xhr\";\n\nexport class DosFS {\n    private dos: DosModule;\n    private em: typeof Module;\n\n    constructor(dos: DosModule) {\n        this.dos = dos;\n        this.em = dos as any;\n    }\n\n    // ### extract\n    public extract(url: string, type: string = \"zip\") {\n        // download archive by given url and then extract it in cwd (cwd will be mounted as C:)\n        //\n        // * `url` - url for downloading archive\n        // * `type` - archive type **only zip is supported**\n        //\n        // this method will return `Promise<void>`, that will be resolved\n        // on success with empty object or rejected\n        return new Promise<void>((resolve, reject) => {\n            if (type !== \"zip\") {\n                reject(\"Only ZIP archive is supported\");\n                return;\n            }\n\n            new Xhr(url, {\n                responseType: \"arraybuffer\",\n                fail: (msg) => reject(msg),\n                progress: (total, loaded) => this.dos.onprogress(\"Downloading \" + url, total, loaded),\n                success: (data: ArrayBuffer) => {\n                    const bytes = new Uint8Array(data);\n                    const buffer = this.em._malloc(bytes.length);\n                    this.em.HEAPU8.set(bytes, buffer);\n                    const retcode = (this.em as any)._extract_zip(buffer, bytes.length);\n                    this.em._free(buffer);\n\n                    if (retcode === 0) {\n                        resolve();\n                    } else {\n                        reject(\"Can't extract zip, retcode \" + retcode + \", see more info in logs\");\n                    }\n                },\n            });\n        });\n    }\n\n    // ### createFile\n    public createFile(file: string, body: ArrayBuffer | Uint8Array | string) {\n        // [synchronous] allow to create file in FS, you can pass absolute path.\n        // All directories will be created\n        //\n        // body can be string or ArrayBuffer or Uint8Array\n\n        if (body instanceof ArrayBuffer) {\n            body = new Uint8Array(body);\n        }\n\n        // windows style path are also valid, but **drive letter is ignored**\n        // if you pass only filename, then file will be writed in root \"/\" directory\n        file = file.replace(new RegExp(\"^[a-zA-z]+:\"), \"\") .replace(new RegExp(\"\\\\\\\\\", \"g\"), \"/\");\n        const parts = file.split(\"/\");\n\n        if (parts.length === 0) {\n            this.dos.onerror(\"Can't create file '\" + file + \"', because it's not valid file path\");\n            return;\n        }\n\n        const filename = parts[parts.length - 1].trim();\n\n        if (filename.length === 0) {\n            this.dos.onerror(\"Can't create file '\" + file + \"', because file name is empty\");\n            return;\n        }\n\n        /* i < parts.length - 1, because last part is file name */\n        let path = \"/\";\n        for (let i = 0; i < parts.length - 1; ++i) {\n            const part = parts[i].trim();\n            if (part.length === 0) {\n                continue;\n            }\n\n            (this.em as any).FS_createPath(path, part, true, true);\n            path = path + \"/\" + part;\n        }\n\n        (this.em as any).FS_createDataFile(path, filename, body, true, true, true);\n    }\n}\n","// # DosHost\n// This class is used to detect and provide information about\n// features that supported in current environment\n\n/* tslint:disable:member-ordering */\nimport { Build } from \"./js-dos-build\";\nimport { DosModule } from \"./js-dos-module\";\nimport { Xhr } from \"./js-dos-xhr\";\n\nclass DosHost {\n\n    public wasmSupported = false;\n    public global = window as any;\n\n    private wdosboxPromise: Promise<any> = null;\n\n    constructor() {\n        this.global.exports = {};\n\n        // ### WebAssembly\n        // Host able to detect is WebAssembly supported or not,\n        // this information is stored in `Host.wasmSupported` variable\n        try {\n            if (typeof WebAssembly === \"object\" &&\n                typeof WebAssembly.instantiate === \"function\" &&\n                typeof WebAssembly.compile === \"function\") {\n\n                const wmodule = new WebAssembly.Module(Uint8Array.of(0x0, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00));\n                if (wmodule instanceof WebAssembly.Module) {\n                    this.wasmSupported = new WebAssembly.Instance(wmodule) instanceof WebAssembly.Instance;\n                }\n            }\n        } catch (error) {\n            /* do nothing WebAssembly is not supported */\n        }\n\n        // ### polyfill\n        // Host also provides limited set of polyfills to support legacy browsers\n        this.polyfill();\n    }\n\n    // Currently polyfill contains implementations for:\n    // `Math.imul`, `Math.fround`, `Math.clz32`, `Math.trunc`\n    /* tslint:disable:no-bitwise */\n    /* tslint:disable:only-arrow-functions */\n    private polyfill() {\n        if (!Math.imul || Math.imul(0xffffffff, 5) !== -5) {\n            Math.imul = function imul(a: any, b: any) {\n                const ah = a >>> 16;\n                const al = a & 0xffff;\n                const bh = b >>> 16;\n                const bl = b & 0xffff;\n                return (al * bl + ((ah * bl + al * bh) << 16)) | 0;\n            };\n        }\n        Math.imul = Math.imul;\n\n        if (!Math.fround) {\n            Math.fround = function(x) { return x; };\n        }\n        Math.fround = Math.fround;\n\n        if (!Math.clz32) {\n            Math.clz32 = function(x) {\n                x = x >>> 0;\n                for (let i = 0; i < 32; i++) {\n                    if (x & (1 << (31 - i))) { return i; }\n                }\n                return 32;\n            };\n        }\n        Math.clz32 = Math.clz32;\n\n        if (!Math.trunc) {\n            Math.trunc = function(x) {\n                return x < 0 ? Math.ceil(x) : Math.floor(x);\n            };\n        }\n        Math.trunc = Math.trunc;\n    }\n\n    // ### resolveDosBox\n    // `resolveDosBox` is another important task of DosHost\n    public resolveDosBox(url: string, module: DosModule) {\n        // When dosbox is resolved, WDOSBOX module is set to\n        // global variable `exports.WDOSBOX`. This variable is\n        // used to prevent next loads of same dosbox module.\n        if (this.global.exports.WDOSBOX) {\n            module.ondosbox(this.global.exports.WDOSBOX, this.global.exports.instantiateWasm);\n            return;\n        }\n\n        if (!this.wasmSupported) {\n            module.onerror(\"WebAssembly is not supported, can't resolve wdosbox\");\n            return;\n        }\n\n        if (this.wdosboxPromise === null) {\n            this.wdosboxPromise = this.compileDosBox(url, module);\n        }\n\n        this.wdosboxPromise.then((instance: any) => {\n            /* leave promise scope */\n            const fn = () => {\n                this.wdosboxPromise = null;\n                module.ondosbox(this.global.exports.WDOSBOX, this.global.exports.instantiateWasm);\n            };\n            setTimeout(fn, 1);\n        }, (message: string) => {\n            /* leave promise scope */\n            const fn = () => {\n                this.wdosboxPromise = null;\n                module.onerror(message);\n            };\n            setTimeout(fn, 1);\n        });\n    }\n\n    // If dosbox is not yet resolved, then:\n    private compileDosBox(url: string, module: DosModule) {\n        const buildTotal = Build.wasmSize + Build.jsSize;\n        return new Promise((resolve, reject) => {\n            const wasmUrl = url.replace(\".js\", \".wasm.js\");\n\n            // * Host downloads `wdosbox` asm + js scripts\n            new Xhr(wasmUrl, {\n                responseType: \"arraybuffer\",\n                progress: (total, loaded) => {\n                    if (module.onprogress) {\n                        module.onprogress(\"Resolving DosBox\", buildTotal, loaded);\n                    }\n                },\n                fail: (url: string, status: number, message: string) => {\n                    reject(\"Can't download wasm, code: \" + status +\n                        \", message: \" + message + \", url: \" + url);\n                },\n                success: (response: any) => {\n                    // * Compile dosbox wasm module\n                    const promise = WebAssembly.compile(response);\n                    const onreject = (reason: any) => {\n                        reject(reason + \"\");\n                    };\n                    promise.catch(onreject);\n                    promise.then((wasmModule) => {\n                        this.global.exports.instantiateWasm = (info: any, receiveInstance: any) => {\n                            // *  Instaniate it for each new dosbox runtime\n                            return WebAssembly.instantiate(wasmModule, info)\n                                .catch(onreject)\n                                .then((instance) => {\n                                    receiveInstance(instance, wasmModule);\n                                });\n                        };\n\n                        new Xhr(url, {\n                            progress: (total, loaded) => {\n                                if (module.onprogress) {\n                                    module.onprogress(\"Resolving DosBox\", buildTotal, Build.wasmSize + loaded);\n                                }\n                            },\n                            fail: (url: string, status: number, message: string) => {\n                                reject(\"Can't download wdosbox.js, code: \" + status +\n                                    \", message: \" + message + \", url: \" + url);\n                            },\n                            success: (response: any) => {\n                                module.onprogress(\"Resolving DosBox\", buildTotal, buildTotal);\n\n                                /* tslint:disable:no-eval */\n                                eval.call(window, response);\n                                resolve(this.global.exports.WDOSBOX);\n                            },\n                        });\n                    });\n                },\n            });\n        });\n    }\n\n}\n\nexport const Host = new DosHost();\n","// # DosModule\n// DosModule is [emscripten module object](https://kripken.github.io/emscripten-site/docs/api_reference/module.html),\n// with additional functionality\nimport { DosRuntime } from \"./js-dos\";\nimport { Build } from \"./js-dos-build\";\nimport { DosCommandInterface } from \"./js-dos-ci\";\nimport { jsdosconf } from \"./js-dos-conf\";\nimport { DosFS } from \"./js-dos-fs\";\nimport { DosOptions } from \"./js-dos-options\";\nimport { DosUi } from \"./js-dos-ui\";\n\nexport class DosModule extends DosOptions {\n    public isValid: boolean = false;\n    public canvas: HTMLCanvasElement = null;\n    public version = Build.version;\n    private ci: Promise<DosCommandInterface> = null;\n    private instance: any;\n    private fs: DosFS = null;\n    private ui: DosUi = null;\n    private onready: (runtime: DosRuntime) => void;\n\n    constructor(canvas: HTMLCanvasElement, onready: (runtime: DosRuntime) => void) {\n        super();\n        this.canvas = canvas;\n        this.onready = onready;\n    }\n\n    // ### logging\n    // DosModule implements simply logging features:\n    // `debug`, `info`, `warn`, `error` methods\n    public debug(message: string) {\n        this.log(\"[DEBUG] \" + message);\n    }\n\n    public info(message: string) {\n        this.log(\"[INFO] \" + message);\n    }\n\n    public warn(message: string) {\n        this.log(\"[WARN] \" + message);\n    }\n\n    public error(message: string) {\n        this.log(\"[ERROR] \" + message);\n    }\n\n    // ### ondosbox\n    public ondosbox(dosbox: any, instantiateWasm: any) {\n        this.info(\"DosBox resolved\");\n        (this as any).instantiateWasm = instantiateWasm;\n        this.instance = new dosbox(this);\n    }\n    // Method `ondosbox` is called when\n    // [Host](https://js-dos.com/6.22/docs/api/generate.html?page=js-dos-host) is resolved.\n    // This method instaniate wasm dosbox module with `this` as emscripten\n    // module object. It means that emscripten will call\n    // `this.onRuntimeInitialized` when runtime will be ready\n\n    public resolve() {\n        if (!this.wdosboxUrl) {\n            this.wdosboxUrl = \"wdosbox.js\";\n        }\n\n        if (!this.log) {\n            /* tslint:disable:no-console */\n            this.log = (message: string) => console.log(message);\n        }\n\n        if (!this.canvas) {\n            this.onerror(\"canvas field is required, but not set!\");\n            return;\n        }\n\n        if (!this.onprogress) {\n            this.ui = new DosUi(this);\n            this.onprogress = (stage, total, loaded) => this.ui.onprogress(stage, total, loaded);\n        }\n\n        // ### sdl defaults\n        // DosModule overrides defaults for emscripten SDL wrapper\n        // for maximum performance\n        (this as any).SDL = {\n            defaults: {\n                widht: 320,\n                height: 200,\n                copyOnLock: false,\n                discardOnLock: true,\n                opaqueFrontBuffer: false,\n            },\n        };\n\n        this.isValid = true;\n    }\n\n    // ### onRuntimeInitialized\n    public onRuntimeInitialized() {\n        const mainFn = (args?: string[]) => {\n            // When emscripten runtime is initialized and main\n            // function is called:\n            //\n            // * DosModule detach [auto ui](https://js-dos.com/6.22/docs/api/generate.html?page=js-dos-ui)\n            if (this.ui !== null) {\n                this.ui.detach();\n                this.ui = null;\n            }\n\n            if (!args) {\n                args = [];\n            }\n\n            // * Write default [dosbox.conf](https://js-dos.com/6.22/docs/api/generate.html?page=js-dos-conf)\n            // file to user directory\n            this.fs.createFile(\"/home/web_user/.dosbox/dosbox-jsdos.conf\", jsdosconf);\n            // * Mount emscripten FS as drive c:\n            args.unshift(\"-userconf\", \"-c\", \"mount c .\", \"-c\", \"c:\");\n            // * Run dosbox with passed arguments and resolve\n            // [DosCommandInterface](https://js-dos.com/6.22/docs/api/generate.html?page=js-dos-ci)\n            (this as any).callMain(args);\n            return new Promise<DosCommandInterface>((resolve) => {\n                new DosCommandInterface(this, (ci: DosCommandInterface) => {\n                    resolve(ci);\n                });\n            });\n        };\n        this.fs = new DosFS(this);\n        this.onready({\n            fs: this.fs,\n            main: mainFn,\n        });\n    }\n\n}\n","// # DosOptions\n// Is a options object that you pass to constructor of\n// [Dos](https://js-dos.com/6.22/docs/api/generate.html?page=js-dos)\n// class, to configure emulation layer\nimport { DosCommandInterface } from \"./js-dos-ci\";\nimport { DosFS } from \"./js-dos-fs\";\n\nexport class DosOptions {\n\n    // ### onprogress\n    public onprogress?: (stage: string, total: number, loaded: number) => void;\n    // progress event listener, it is fired when loading progress is changed\n    // if this function is not set, then \n    // [auto ui](https://js-dos.com/6.22/docs/api/generate.html?page=js-dos-ui) will be used\n    // to show progress\n    //\n    // * `stage` - current loading stage\n    // * `total` - total bytes to download on current stage\n    // * `loaded` - downloaded bytes\n\n    // ### onerror\n    public onerror?: (message: string) => void;\n    // this function is called when error happens\n    //\n    // * `message` - infomation about error\n\n    // ### log\n    public log?: (message: string) => void;\n    // you can provide log function, to override logging, by default js-dos uses console.log as implementation\n\n    // ### wdosboxUrl\n    public wdosboxUrl?: string;\n    // you can set alternative url for downloading js-dos script, default is 'wdosbox.js'\n\n}\n","// # JsDosUi\n// Optional ui module for js-dos.\n// This ui will be applied if client did not set `onprogress` in\n// [DosOptions](https://js-dos.com/6.22/docs/api/generate.html?page=js-dos-options)\nimport { DosModule } from \"./js-dos-module\";\n\nexport class DosUi {\n    private canvas: HTMLCanvasElement;\n    private dos: DosModule;\n\n    private overlay: HTMLDivElement;\n    private loaderMessage: HTMLDivElement;\n    private hidden: boolean;\n\n    constructor(dos: DosModule) {\n        this.dos = dos;\n        this.canvas = dos.canvas;\n\n        // ### How it works\n        // This ui replace canvas element with div .dosbox-container,\n        // that contains original canvas and .dosbox-overlay as children\n        // You can change style of ui by editing css for this two classes\n\n        try {\n            if (document.getElementById(\"js-dos-ui-css\") === null) {\n                const style = document.createElement(\"style\") as HTMLStyleElement;\n                style.id = \"js-dos-ui-css\";\n                style.innerHTML = this.css;\n                document.head.appendChild(style);\n            }\n\n            if (this.canvas.parentElement.className !== \"dosbox-container\") {\n                const container = document.createElement(\"div\") as HTMLDivElement;\n                container.className = \"dosbox-container\";\n\n                const parent = this.canvas.parentElement;\n                parent.replaceChild(container, this.canvas);\n                container.appendChild(this.canvas);\n\n                const overlay = document.createElement(\"div\") as HTMLDivElement;\n                overlay.className = \"dosbox-overlay\";\n                container.appendChild(overlay);\n\n                overlay.innerHTML = this.overlayHtml;\n            }\n\n            const container = this.canvas.parentElement;\n            this.overlay = this.childById(container, \"dosbox-overlay\");\n            this.loaderMessage = this.childById(this.overlay, \"dosbox-loader-message\");\n\n            this.hidden = true;\n            this.show();\n        } catch (e) {\n            this.onprogress = this.onprogressFallback;\n        }\n    }\n\n    public onprogress(stage: string, total: number, loaded: number) {\n        const message = stage + \" \" + Math.round(loaded * 100 / total * 10) / 10 + \"%\";\n        this.loaderMessage.innerHTML = message;\n        this.dos.info(message);\n\n        if (loaded >= total) {\n            this.hide();\n        } else {\n            this.show();\n        }\n    }\n\n    public detach() {\n        this.hide();\n        this.onprogress = this.onprogressFallback;\n    }\n\n    public hide() {\n        if (this.hidden) {\n            return;\n        }\n        this.hidden = true;\n        this.overlay.setAttribute(\"style\", \"display: none\");\n    }\n\n    public show() {\n        if (!this.hidden) {\n            return;\n        }\n        this.hidden = false;\n        this.overlay.setAttribute(\"style\", \"display: block\");\n    }\n\n    private onprogressFallback(stage: string, total: number, loaded: number) {\n        this.dos.info(stage + \" \" + loaded * 100 / total + \"%\");\n    }\n\n    private childById(parent: Element, className: string) {\n        if (parent === null) {\n            return null;\n        }\n\n        for (let i = 0; i < parent.childElementCount; ++i) {\n            let child = parent.children[i];\n            if (child.className === className) {\n                return child as HTMLDivElement;\n            }\n\n            child = this.childById(child, className);\n            if (child !== null) {\n                return child as HTMLDivElement;\n            }\n        }\n\n        return null;\n    }\n\n    // ### Style\n    /* tslint:disable:member-ordering */\n    /* tslint:disable:max-line-length */\n    private css: string = `\n    .dosbox-container { position: relative; min-width: 320px; min-height: 200px; display: inline-block; }\n    .dosbox-overlay, .dosbox-loader { position: absolute; left: 0; right: 0; top: 0; bottom: 0; background-color: rgba(51, 51, 51, 0.7); }\n    .dosbox-start { text-align: center; position: absolute; left: 0; right: 0; bottom: 50%; color: #f80; font-size: 1.5em; text-decoration: underline; cursor: pointer; }\n    .dosbox-overlay a { color: #f80; }\n    .dosbox-powered { position: absolute; right: 1em; bottom: 1em; font-size: 0.8em; color: #9C9C9C; }\n    .dosbox-loader-message { text-align: center; position: absolute; left: 0; right: 0; bottom: 50%; margin: 0 0 -3em 0; box-sizing: border-box; color: #f80; font-size: 1.5em; }\n    @-moz-keyframes loading { 0% { left: 0; } 50% { left: 8.33333em; } 100% { left: 0; } } @-webkit-keyframes loading { 0% { left: 0; } 50% { left: 8.33333em; } 100% { left: 0; } } @keyframes loading { 0% { left: 0; } 50% { left: 8.33333em; } 100% { left: 0; } } .st-loader { width: 10em; height: 2.5em; position: absolute; top: 50%; left: 50%; margin: -1.25em 0 0 -5em; box-sizing: border-box; }\n    .st-loader:before, .st-loader:after { content: \"\"; display: block; position: absolute; top: 0; bottom: 0; width: 1.25em; box-sizing: border-box; border: 0.25em solid #f80; }\n    .st-loader:before { left: -0.76923em; border-right: 0; }\n    .st-loader:after { right: -0.76923em; border-left: 0; }\n    .st-loader .equal { display: block; position: absolute; top: 50%; margin-top: -0.5em; left: 4.16667em; height: 1em; width: 1.66667em; border: 0.25em solid #f80; box-sizing: border-box; border-width: 0.25em 0; -moz-animation: loading 1.5s infinite ease-in-out; -webkit-animation: loading 1.5s infinite ease-in-out; animation: loading 1.5s infinite ease-in-out; background: #f80; }\n    `;\n\n    // ### Template\n    /* tslint:disable:member-ordering */\n    /* tslint:disable:max-line-length */\n    private overlayHtml: string = `\n        <div class=\"dosbox-loader\">\n            <div class=\"st-loader\">\n                <span class=\"equal\"></span>\n            </div>\n            <div class=\"dosbox-loader-message\"></div>\n        </div>\n        <div class=\"dosbox-powered\">\n            Powered by &nbsp;<a href=\"https://js-dos.com\">js-dos.com</a> (6.22)\n        </div>\n    `;\n}\n","// # Xhr\n// `Xhr` is small wrapper over XMLHttpRequest, that provides some\n// handy methods\n\n// You can configre Xhr with XhrOptions object:\ninterface XhrOptions {\n    method?: string;\n    success?: (response: any) => void;\n    progress?: (total: number, loaded: number) => void;\n    fail?: (url: string, status: number, message: string) => void;\n    data?: string;\n    responseType?: XMLHttpRequestResponseType;\n}\n// * `method` - \"GET\" | \"POST\"\n// * `success` - callback when resource is downloaded\n// * `progress` - callback for progress\n// * `fail` - fail callback\n// * `data` - data for POST request, should typeof `application/x-www-form-urlencoded`\n// * `responseType` - XMLHttpRequestResponseType\n\n// Class Xhr does not have any public methods\nexport class Xhr {\n    private resource: string;\n    private options: XhrOptions;\n    private xhr: XMLHttpRequest;\n    private total: number = 0;\n    private loaded: number = 0;\n\n    constructor(url: string, options: XhrOptions) {\n        this.resource = url;\n        this.options = options;\n        this.options.method = options.method || \"GET\";\n        this.xhr = new XMLHttpRequest();\n        this.xhr.open(this.options.method, url, true);\n        if (this.options.method === \"POST\") {\n            this.xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n        }\n        this.xhr.overrideMimeType(\"text/plain; charset=x-user-defined\");\n\n        let progressListner;\n        if (typeof (progressListner = this.xhr).addEventListener === \"function\") {\n            progressListner.addEventListener(\"progress\", (evt) => {\n                this.total = evt.total;\n                this.loaded = evt.loaded;\n                if (this.options.progress) {\n                    return this.options.progress(evt.total, evt.loaded);\n                }\n            });\n        }\n\n        let errorListener;\n        if (typeof (errorListener = this.xhr).addEventListener === \"function\") {\n            errorListener.addEventListener(\"error\", (evt) => {\n                if (this.options.fail) {\n                    this.options.fail(this.resource, this.xhr.status, \"connection problem\");\n                    return delete this.options.fail;\n                }\n            });\n        }\n        this.xhr.onreadystatechange = () => {\n            return this.onReadyStateChange();\n        };\n        if (this.options.responseType) {\n            this.xhr.responseType = this.options.responseType;\n        }\n        this.xhr.send(this.options.data);\n    }\n\n    private onReadyStateChange() {\n        if (this.xhr.readyState === 4) {\n            if (this.xhr.status === 200) {\n                if (this.options.success) {\n                    const total = Math.max(this.total, this.loaded);\n                    this.options.progress(total, total);\n                    return this.options.success(this.xhr.response);\n                }\n            } else if (this.options.fail) {\n                this.options.fail(this.resource, this.xhr.status, \"connection problem\");\n                return delete this.options.fail;\n            }\n        }\n    }\n\n    private arrayBufferToString(buffer: ArrayBuffer) {\n        const bufView = new Uint16Array(buffer);\n        const length = bufView.length;\n        let result = \"\";\n        let maxCallSize = Math.pow(2, 16) - 1;\n        let i = 0;\n        while (i < length) {\n            if (i + maxCallSize > length) {\n                maxCallSize = length - i;\n            }\n            result += String.fromCharCode.apply(null, bufView.subarray(i, i + maxCallSize));\n            i += maxCallSize;\n        }\n        return result;\n    }\n\n}\n","\n// # Example\n// ```javascript\n// Dos(canvas).ready((fs, main) => {\n//     fs.extract(\"digger.zip\").then(() => {\n//         main([\"-c\", \"DIGGER.COM\"])\n//     });\n// });\n// ```\n// Dos function is entry point that provides emulation layer.\n// As emulation layer js-dos uses [DosBox ported to emscripten](https://github.com/dreamlayers/em-dosbox/#compiling).\n\n// # Dos\n\nimport { DosCommandInterface } from \"./js-dos-ci\";\nimport { DosFS } from \"./js-dos-fs\";\nimport { Host } from \"./js-dos-host\";\nimport { DosModule } from \"./js-dos-module\";\nimport { DosOptions } from \"./js-dos-options\";\n\n// When you call `Dos(canvas, options)` js-dos behind the scene will download\n// dosbox and prepare it to start. This function will return `Promise<DosReadyPromise>`\n// that will be resolved when dosbox is ready. In case of error promise\n// will be rejected.\n//\n// * `canvas`: HTMLCanvasElement - this canvas element is used as window for dosbox\n// * `options`: [DosOptions](https://js-dos.com/6.22/docs/api/generate.html?page=js-dos-options) -\n// optional configuration object\nexport function Dos(canvas: HTMLCanvasElement, options?: DosOptions) {\n    const promise = new Promise<DosRuntime>((resolve, reject) => {\n        const module = new DosModule(canvas, resolve);\n\n        if (!options) {\n            options = {};\n        }\n\n        if (!options.onerror) {\n            options.onerror = (message: string) => {\n                /* tslint:disable:no-console */\n                console.error(message);\n                /* tslint:enable:no-console */\n            };\n        }\n\n        Object.assign(module, options);\n\n        // ### Error handling\n        // Error handling should support both ways:\n        //\n        // * Through rejecting of promise\n        // * Fire onerror function of DosOptions object\n\n        const onerror = module.onerror;\n        module.onerror = (message: string) => {\n            reject(message);\n\n            const fn = () => {\n                if (onerror) {\n                    onerror(message);\n                    module.onerror = onerror;\n                } else {\n                    module.onerror = module.error;\n                }\n            };\n\n            setTimeout(fn, 1);\n        };\n\n        module.resolve();\n        if (!module.isValid) {\n            return;\n        }\n\n        // See [Host](https://js-dos.com/6.22/docs/api/generate.html?page=js-dos-host)\n        // to understand resolving of emulation layer (dosbox).\n        Host.resolveDosBox(module.wdosboxUrl, module);\n    });\n\n// ### DosReadyPromise\n// Is a Promise object with additional method ready.\n// Method `ready` is just a wrapper over `then` method that\n// split resolved object into meaningful parts.\n\n    const dosReadyPromise = (promise as unknown) as DosReadyPromise;\n    dosReadyPromise.ready = (onready) => {\n        dosReadyPromise.then((runtime: DosRuntime) => {\n            onready(runtime.fs, runtime.main);\n        });\n        return dosReadyPromise;\n    };\n    return dosReadyPromise;\n}\n\nexport type DosMainFn = (args?: string[]) => Promise<DosCommandInterface>;\n\n// Plain promise will be resolved with `DosRuntime` interface, that\n// includes:\n//\n// * `fs`: [DosFS](https://js-dos.com/6.22/docs/api/generate.html?page=js-dos-fs) -\n// API for working with dosbox filesystem\n// * `main`: DosMainFn - a function that you should call to actuall start\n// dosbox. It's like a main function in C++, or shell command line. This function\n// will return Promise of [DosCommandInterface](https://js-dos.com/6.22/docs/api/generate.html?page=js-dos-ci).\n// You can use it to control runned dosbox.\nexport interface DosRuntime {\n    fs: DosFS;\n    main: DosMainFn;\n}\n\nexport interface DosReadyPromise extends Promise<DosRuntime> {\n    // `onready` - callback that receive DosRuntime splitted by fields\n    ready: (onready: (fs: DosFS, main: DosMainFn) => void) => Promise<DosRuntime>;\n}\n\n(window as any).Dos = Dos;\n"]}